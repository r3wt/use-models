{"version":3,"sources":["../../src/lib/validators.js","../../src/index.js","Form.js","App.js","index.js"],"names":["validators","not_empty","value","email","input","document","result","parts","az_space","test","website","person","model","validate","has","o","getValidationPaths","options","object","paths","Object","_flatten","path","key","objectBit","Array","console","execValidator","fn","res","Promise","Error","parsePath","oSet","parseOptions","defaultState","errorOptions","assignValues","optPointer","shouldRecurse","statePointer","errorPointer","opts","errorState","validationPaths","stringifyErr","err","watchPaths","useState","a","errs","i","getValue","field","error","errState","getUpdate","setErrors","validatePath","errorHandler","__state","_state","obj","type","onChange","e","oldValue","setState","name","truevalue","falsevalue","newValue","checked","errors","cb","watchers","hydrate","useCallback","_errors","checkbox","radio","submit","state","watch","set","get","getState","getErrors","Form","useModels","length","username","remember","newsletter","user_type","useEffect","onSubmit","log","onError","previousValue","className","onClick","JSON","stringify","resolve","reject","setTimeout","SyntaxHighlighter","registerLanguage","jsx","App","class","href","language","style","prism","customStyle","fontSize","lineHeight","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7c9c8a9b.chunk.js","sourcesContent":["// the built in validators\r\nconst validators = {\r\n    not_empty(value){\r\n        return value.length===0? 'can\\'t be empty' : void 0;\r\n    },\r\n    email(value) {\r\n        const input = document.createElement('input');\r\n        input.type = 'email';\r\n        input.value = value;\r\n        var result = input.checkValidity();\r\n        const parts = value.split('@');\r\n        if(parts[1]){\r\n            if(parts[1].indexOf('.') <= 0){\r\n                result = false;\r\n            }\r\n        }else{\r\n            return 'Email Address can\\'t be blank';\r\n        }\r\n        if(!result){\r\n            return 'Invalid Email Address';\r\n        }\r\n    },\r\n    az_space( value  ) {\r\n        if( ! /^[A-Za-z .]+$/.test(value) ){\r\n            return 'Only letters and spaces are allowed.';\r\n        }\r\n    },\r\n    website( value ) {\r\n        if( ! /(^|\\s)((https?:\\/\\/)[\\w-]+(\\.[\\w-]+)+\\.?(:\\d+)?(\\/\\S*)?)/gi.test(value) ) {\r\n            return 'Please enter a valid url.';\r\n        }\r\n    },\r\n    person(value) {\r\n        if( ! /^(-?([A-Z].\\s)?([A-Z][a-z]+)\\s?)+([A-Z]'([A-Z][a-z]+))?$/g.test(value) ) {\r\n            return 'Enter a valid name.'\r\n        }\r\n    }\r\n};\r\n\r\nexport default validators;","import { useState, useCallback, useMemo } from 'react';\nimport validators from './lib/validators';\n\nfunction extendValidators( name, fn ) {\n    validators[name] = fn;\n};\n\nfunction model( value, ...validate) {\n    return { value, validate };\n}\n\nexport { extendValidators, model };\n\nconst has = (o,k) => o[k]!==undefined;\n\nconst flatten = object => {\n  return Object.assign( {}, ...function _flatten( objectBit, path = '' ) {  //spread the result into our return object\n    return [].concat(                                                       //concat everything into one level\n      ...Object.keys( objectBit ).map(                                      //iterate over object\n        key => typeof objectBit[ key ] === 'object' && !Array.isArray(objectBit[key]) ?                       //check if there is a nested object\n          _flatten( objectBit[ key ], !path?key:`${ path }.${ key }` ) :              //call itself if there is\n          ( { [  !path ? key : `${ path }.${ key }` ]: objectBit[ key ] } )                //append object with it’s path as key\n      )\n    )\n  }( object ) );\n};\n\nconst getValidationPaths = (options) => {\n    const paths = flatten(options);\n    for(let k in paths){\n        if(!Array.isArray(paths[k])){\n            paths[k]=[paths[k]];\n        }\n    }\n    console.log('validationPaths',paths);\n    return paths;\n}\n\nfunction execValidator(fn,val) {\n    const executor = typeof fn==='function'?fn:has(validators,fn)?validators[fn]:function noop(){ console.warn('built in validator with name `%s` not found. this is a no-op',fn)};//default-> no op\n    const res = executor(val);\n    if(!(res instanceof Promise)){\n        if(res){\n            return Promise.reject(!(res instanceof Error) ? new Error(res): res);\n        }\n        return Promise.resolve();\n    }\n    return res;\n}\n\nfunction parsePath(path) {\n    return path.split('.');\n}\n\n//recursive assign value to all properties of object\nfunction oSet(o,v) {\n    for(let k in o){\n        if(typeof o[k]==='object'){\n            oSet(o[k],v);\n        }else{\n            o[k]=v;\n        }\n    }\n    return o;\n}\n\nfunction assignValues( optPointer, statePointer, errorPointer ) {\n    for(let k in optPointer) {\n        console.log(k,optPointer[k]);\n        if(typeof optPointer[k]==='object'&&optPointer[k]!==null){\n            let shouldRecurse=true;\n            if(has(optPointer[k],'value')){\n                statePointer[k]=optPointer[k].value;\n                shouldRecurse=false;\n            }\n            if(has(optPointer[k],'validate')){\n                errorPointer[k]=optPointer[k].validate;\n                shouldRecurse=false;\n            }\n            if(shouldRecurse){\n                if(!has(statePointer,k)){\n                    statePointer[k]={};\n                }\n                if(!has(errorPointer,k)){\n                    errorPointer[k]={};\n                }\n                assignValues(optPointer[k],statePointer[k],errorPointer[k]);\n            }\n        }else{\n            statePointer[k]=optPointer[k];\n        }\n    }\n} \n\nfunction parseOptions ( opts ) {\n    console.log('parseOptions()');\n    const defaultState = {};\n    const errorOptions = {};\n    assignValues(opts,defaultState,errorOptions);//this recursive function will populate defaultState and errorOptions for us.\n    const errorState = oSet({...defaultState},false);\n    const validationPaths = getValidationPaths(errorOptions);\n    console.log(defaultState,errorState,validationPaths);\n    return {defaultState,errorState,validationPaths};\n}\n\nfunction stringifyErr( err ) {\n    if(typeof err ==='string'){\n        return err;\n    }else{\n        // Error, or Error like object(eg, custom error classes)\n        if(typeof err==='object' && has(err,'message')) {\n            return err.message;\n        }\n    }\n    return err.toString();//last resort\n}\n\nexport default function useModels(options={}) {\n\n    console.log('useModels()');\n\n    const {defaultState,errorState,validationPaths} = parseOptions(options);\n    const watchPaths={};\n\n    const [state,setState] = useState(defaultState);\n    const [errors,setErrors] = useState(errorState);\n\n    console.log(state,errors);\n\n    const validate = async () => {\n        console.log('validate()');\n        const errs=[];\n        for(let k in validationPaths){\n            for(let i=0;i<validationPaths[k].length;i++){\n                try{\n                    await execValidator(validationPaths[k][i],getValue(k));\n                }\n                catch(e){\n                    errs.push({field:k,error:e});\n                }\n            }\n        }\n\n        console.log('got results',errs);\n        let errState = oSet({...defaultState},false);\n        console.log('errState is',errState);\n        if(errs.length){\n            console.log('got %d errors',errs.length);\n            errs.forEach(err=>{\n                console.log('looking at errors',err.field,err.error);\n                errState=getUpdate(err.field,stringifyErr(err.error),errState);\n            });\n        }\n        console.log(errState);\n        setErrors(errState);    \n        return errs;\n\n    }\n\n    const validatePath = async (path,value) => {\n        console.log('validatePath()');\n        if(has(validationPaths,path)){\n            for(let i=0;i<validationPaths[path].length;i++){\n                try{\n                    await execValidator(validationPaths[path][i],value);\n                }\n                catch(e){\n                    console.log('gotError in validatePath()',e);\n                    return setErrors(getUpdate(path,stringifyErr(e),errors));\n                }\n            }\n            setErrors(getUpdate(path,false,errors));\n        }else{\n            console.log('no validation for field');\n        }\n    };\n\n    let errorHandler =()=>{};\n\n    function getValue(name) {\n        console.log('getValue()');\n        const path = parsePath(name);\n        let value = state;\n        for(let i=0;i<path.length;i++) {\n            value=value[path[i]];\n        }\n        return value;\n    }\n\n    function getUpdate(name,value,__state=state) {\n        console.log('getUpdate()');\n        const _state = {...__state};\n        const path = parsePath(name);\n        if(path.length){\n            var obj = _state;\n            for(let i=0;i<path.length-1;i++) {\n                obj = has(obj,path[i]) ? obj[path[i]] : {};\n            }\n            obj[path[path.length-1]] = value;    \n        }\n        return _state;    \n    }\n\n    function input(name,type=\"text\"){\n        console.log('input()')\n        return {\n            onChange: (e)=>{\n                console.log(e);\n                var value = e;//components like react-select-me pass primitive values\n                if(has(e,'value')){\n                    value = e.value;\n                }\n                console.log(has(e,'target'));\n                if(has(e,'target')){\n                    value = e.target.value;//normal inputs dont\n                }\n                console.log(value);\n                const oldValue = getValue(name);\n                setState(getUpdate(name,value));\n                if(watchPaths[name]){\n                    watchPaths[name](value,oldValue);\n                }\n                validatePath(name,value);\n            },\n            value: getValue(name),\n            name,\n            type\n        };\n    };\n\n    function checkbox(name,truevalue=true,falsevalue=false){\n        console.log('checkbox()');\n        return {\n            onChange: (e)=>{\n                const newValue = e.target.checked?truevalue:falsevalue;\n                const oldValue = getValue(name);\n                setState(getUpdate(name,newValue));\n                if(watchPaths[name]){\n                    watchPaths[name](newValue,oldValue);\n                }\n                validatePath(name,newValue);\n            },\n            checked: getValue(name)===truevalue,\n            type:'checkbox',\n            name,\n            value:truevalue\n        };\n    };\n\n    function radio(name,value=null){\n        console.log('radio()');\n        return {\n            onChange: (e)=>{\n                if(e.target.checked){\n                    const newValue = value;\n                    const oldValue = getValue(name);\n                    setState(getUpdate(name,value))\n                    if(watchPaths[name]){\n                        watchPaths[name](newValue,oldValue);\n                    }\n                    validatePath(name,newValue);\n                }\n            },\n            checked:  getValue(name)===value,\n            type:'radio',\n            name,\n            value\n        };\n    };\n\n    function submit(cb){\n        console.log('submit()')\n        return async e=>{\n            console.log('onSubmit()');\n            e.preventDefault();\n            const errs = await validate();\n            console.log('got result from validate()',errs);\n            if(errs.length){\n                errorHandler(errors,state);\n            }else{\n                cb(state);//send the full state to the submit function\n            }\n            e.stopPropagation();\n        };\n        \n    };\n\n    function error(cb) {\n        console.log('error()');\n        errorHandler=cb;\n        return e=>{\n            console.log('errorHandler()');\n            cb(errors,state);\n        };\n    }\n\n    function getState() {\n        console.log('getState()');\n        return state;\n    }\n\n    function getErrors(){\n        console.log('getErrors()');\n        return errors;\n    }\n\n    function watch( path, fn ) {\n        console.log('watch()')\n        watchPaths[path]=fn;\n        return function unwatch(){\n            delete watchPaths[path];\n        }\n    }\n\n    function set( name, value, validate=true,watchers=true ) {\n        const oldValue = getValue(name);\n        setState(getUpdate(name,value));\n        if(watchers && watchPaths[name]){\n            watchPaths[name](value,oldValue);\n        }\n        if(validate){\n            validatePath(name,value);\n        }\n    }\n\n    function get( name ){\n        return getValue( name );\n    }\n\n    const hydrate = useCallback(( _state, _errors=false )=> {\n        console.log('hydrate()');\n        setState({...state,..._state});\n        if(_errors){\n            setErrors({...errors,..._errors});\n        }\n    },[]);\n    \n    return { input, checkbox, radio, submit, error, errors, state, watch, hydrate, set, get, getState, getErrors, setState, setErrors };\n\n};","import React, { useEffect } from 'react'\r\n\r\nimport useModels,{ model, extendValidators } from 'use-models';\r\n\r\nextendValidators('checkUsername',function ( value ) {\r\n    return new Promise((resolve,reject)=>{\r\n        setTimeout(()=>{\r\n            reject(new Error('That username is taken'));\r\n        },200);\r\n    });\r\n});\r\n\r\nexport default function Form() {\r\n\r\n    const { \r\n        state, errors, input, checkbox, radio, submit, error, watch, hydrate, set\r\n    } = useModels({\r\n        name: model('',value => {\r\n            if( value.length<5 ){\r\n                return 'Name must be at least 5 characters';\r\n            }\r\n        }),\r\n        username: model('','checkUsername'),\r\n        email: model('','email'),\r\n        remember: false,\r\n        newsletter: 'no',\r\n        user_type:'user'\r\n    });\r\n\r\n    //we can hydrate the state(and errors), for example from localstorage or a db call\r\n    useEffect(()=>{\r\n        hydrate({\r\n            name:'Garrett',\r\n            email:'test@test.com',\r\n            newsletter: 'yes'\r\n        });\r\n    },[hydrate]);\r\n\r\n    const onSubmit = submit(state=>{\r\n        //do something with your form data\r\n        console.log(state);\r\n    });\r\n\r\n    const onError = error((errors,state)=>{\r\n        //do something on form submit error\r\n    });\r\n\r\n    watch('username',(value,previousValue)=>{\r\n        console.log('username changed from %s to %s',previousValue,value);\r\n    }); // returns a function that unregisters the watcher.\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <form onSubmit={onSubmit} onError={onError}>\r\n                <div className='form-group'>\r\n                    <label>Select user type:</label>\r\n                    <div className=\"user-type-select\">\r\n                        <div className={\"user-type-option\"+(state.user_type==='user'?' selected':'')} onClick={e=>set('user_type','user')}>\r\n                            Normal User\r\n                        </div>\r\n                        <div className={\"user-type-option\"+(state.user_type==='admin'?' selected':'')} onClick={e=>set('user_type','admin')}>\r\n                            Admin User\r\n                        </div>\r\n                    </div>    \r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Name</label>\r\n                    <input {...input('name')} />\r\n                    { errors.name && <p className='help-text'>{errors.name}</p> }\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Desired Username</label>\r\n                    <input {...input('username')} />\r\n                    { errors.username && <p className='help-text'>{errors.username}</p> }\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Email Address:</label>\r\n                    <input {...input('email','email')} />\r\n                    { errors.email && <p className='help-text'>{errors.email}</p> }\r\n                </div>\r\n                <div className=\"form-group-check\">\r\n                    <input {...checkbox('remember')} /> <label>Remember me</label>\r\n                </div>\r\n                <div className=\"form-group with-nested\">\r\n                    <label>Sign up for newsletter?</label>\r\n                    <div className=\"form-group-check\">\r\n                        <input {...radio('newsletter','yes')} /> <label>Yes, Sign me up!</label>\r\n                    </div>\r\n                    <div className=\"form-group-check\">\r\n                        <input {...radio('newsletter','no')} /> <label>No thanks</label>\r\n                    </div>\r\n                </div>\r\n                <button type=\"submit\">Submit</button>\r\n                <div className=\"results\">\r\n                    <div className=\"result-50\">\r\n                        <strong>State:</strong>\r\n                        <pre className=\"debug\">\r\n                            {JSON.stringify(state,null,2)}\r\n                        </pre>\r\n                    </div>\r\n                    <div className=\"result-50\">\r\n                        <strong>Errors:</strong>\r\n                        <pre className=\"debug\">\r\n                            {JSON.stringify(errors,null,2)}\r\n                        </pre>\r\n                    </div> \r\n                </div>\r\n                     \r\n            </form>\r\n              \r\n        </div>\r\n    );\r\n    \r\n};","import React from 'react';\nimport Form from './Form';\n\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx';\nimport prism from 'react-syntax-highlighter/dist/esm/styles/prism/prism';\n \nSyntaxHighlighter.registerLanguage('jsx', jsx);\n\nconst codeString = `\nimport React, { useEffect } from 'react'\n\nimport useModels,{ model, extendValidators } from 'use-models';\n\nextendValidators('checkUsername',function ( value ) {\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            reject(new Error('That username is taken'));\n        },200);\n    });\n});\n\nexport default function Form() {\n\n    const { \n        state, errors, input, checkbox, radio, submit, error, watch, hydrate, set\n    } = useModels({\n        name: model('',value => {\n            if( value.length<5 ){\n                return 'Name must be at least 5 characters';\n            }\n        }),\n        username: model('','checkUsername'),\n        email: model('','email'),\n        remember: false,\n        newsletter: 'no',\n        user_type:'user'\n    });\n\n    //we can hydrate the state(and errors), for example from localstorage or a db call\n    useEffect(()=>{\n        hydrate({\n            name:'Garrett',\n            email:'test@test.com',\n            newsletter: 'yes'\n        });\n    },[hydrate]);\n\n    const onSubmit = submit(state=>{\n        //do something with your form data\n        console.log(state);\n    });\n\n    const onError = error((errors,state)=>{\n        //do something on form submit error\n    });\n\n    watch('username',(value,previousValue)=>{\n        console.log('username changed from %s to %s',previousValue,value);\n    }); // returns a function that unregisters the watcher.\n\n    return (\n        <div className=\"form\">\n            <form onSubmit={onSubmit} onError={onError}>\n                <div className='form-group'>\n                    <label>Select user type:</label>\n                    <div className=\"user-type-select\">\n                        <div className={\"user-type-option\"+(state.user_type==='user'?' selected':'')} onClick={e=>set('user_type','user')}>\n                            Normal User\n                        </div>\n                        <div className={\"user-type-option\"+(state.user_type==='admin'?' selected':'')} onClick={e=>set('user_type','admin')}>\n                            Admin User\n                        </div>\n                    </div>    \n                </div>\n                <div className=\"form-group\">\n                    <label>Name</label>\n                    <input {...input('name')} />\n                    { errors.name && <p className='help-text'>{errors.name}</p> }\n                </div>\n                <div className=\"form-group\">\n                    <label>Desired Username</label>\n                    <input {...input('username')} />\n                    { errors.username && <p className='help-text'>{errors.username}</p> }\n                </div>\n                <div className=\"form-group\">\n                    <label>Email Address:</label>\n                    <input {...input('email','email')} />\n                    { errors.email && <p className='help-text'>{errors.email}</p> }\n                </div>\n                <div className=\"form-group-check\">\n                    <input {...checkbox('remember')} /> <label>Remember me</label>\n                </div>\n                <div className=\"form-group with-nested\">\n                    <label>Sign up for newsletter?</label>\n                    <div className=\"form-group-check\">\n                        <input {...radio('newsletter','yes')} /> <label>Yes, Sign me up!</label>\n                    </div>\n                    <div className=\"form-group-check\">\n                        <input {...radio('newsletter','no')} /> <label>No thanks</label>\n                    </div>\n                </div>\n                <button type=\"submit\">Submit</button>\n                <div className=\"results\">\n                    <div className=\"result-50\">\n                        <strong>State:</strong>\n                        <pre>\n                            {JSON.stringify(state,null,2)}\n                        </pre>\n                    </div>\n                    <div className=\"result-50\">\n                        <strong>Errors:</strong>\n                        <pre>\n                            {JSON.stringify(errors,null,2)}\n                        </pre>\n                    </div> \n                </div>\n                     \n            </form>\n              \n        </div>\n    );\n    \n};\n`;\n\nexport default function App() {\n\n    return (\n        <div className=\"gh-example\">\n            <div class=\"gh-100 title\">\n                <div className=\"left\">\n                    <h1>Use-models</h1> \n                    <p>advanced form model hooks for your functional react components</p>\n                </div>\n                <div className=\"right\">\n                    <a href=\"https://www.npmjs.com/package/use-models\">[NPM]</a>\n                    <a href=\"https://github.com/r3wt/use-models\">[Github]</a>    \n                </div>\n            </div>\n            <div class=\"gh-50\">\n                <h1>Code:</h1>\n                <div className=\"box-1\">\n                    <SyntaxHighlighter language=\"jsx\" style={prism} customStyle={{fontSize:'14px',lineHeight:'18px'}}>\n                        {codeString}\n                    </SyntaxHighlighter>    \n                </div>\n                \n            </div>\n            <div class=\"gh-50\">\n                <h1>Output:</h1>\n                <div class=\"box-2\">\n                    <Form /> \n                </div>   \n            </div>\n        </div>\n    )\n    \n};","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}