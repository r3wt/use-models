{"version":3,"sources":["lib/validators.ts","index.ts","Form.tsx","App.tsx","index.tsx"],"names":["not_empty","length","document","createElement","type","value","checkValidity","split","indexOf","test","validate","Object","assign","concat","keys","map","Array","isArray","console","warn","Promise","reject","Error","resolve","s","defaultState","errorState","validationPaths","message","toString","Form","a","e","push","field","error","forEach","g","f","input","onChange","target","name","checkbox","checked","radio","submit","preventDefault","stopPropagation","errors","state","watch","hydrate","set","get","getState","getErrors","setState","setErrors","useModels","model","username","email","remember","newsletter","user_type","useEffect","onSubmit","log","onError","previousValue","className","onClick","_e","htmlFor","id","JSON","stringify","_value","_resolve","setTimeout","SyntaxHighlighter","registerLanguage","jsx","App","useState","mobileActive","setMobileActive","href","language","style","prism","customStyle","fontSize","lineHeight","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.732ce034.chunk.js","sourcesContent":["// the built in validators\r\nconst validators = {\r\n  not_empty(value: string): void | string {\r\n    return value.length === 0 ? 'can\\'t be empty' : void 0;\r\n  },\r\n  email(value: string): void | string {\r\n    const input = document.createElement('input');\r\n    input.type = 'email';\r\n    input.value = value;\r\n    let result = input.checkValidity();\r\n    const parts = value.split('@');\r\n    if (!result || parts[1].indexOf('.') <= 0) {\r\n      return 'Invalid Email Address';\r\n    }\r\n  },\r\n  az_space(value: string): void | string {\r\n    if (! /^[A-Za-z .]+$/.test(value)) {\r\n      return 'Only letters and spaces are allowed.';\r\n    }\r\n  },\r\n  website(value: string): void | string {\r\n    if (! /(^|\\s)((https?:\\/\\/)[\\w-]+(\\.[\\w-]+)+\\.?(:\\d+)?(\\/\\S*)?)/gi.test(value)) {\r\n      return 'Please enter a valid url.';\r\n    }\r\n  },\r\n  person(value: string): void | string {\r\n    if (! /^(-?([A-Z].\\s)?([A-Z][a-z]+)\\s?)+([A-Z]'([A-Z][a-z]+))?$/g.test(value)) {\r\n      return 'Enter a valid name.'\r\n    }\r\n  }\r\n};\r\n\r\nexport default validators;","import { useState, useCallback } from 'react';\r\nimport validators from './lib/validators';\r\n\r\nexport type ValidatorFunctionReturnTypes = void | null | false | undefined | string | Error | ErrorLikeObject;\r\nexport type ValidatorFunction = (val: any) => ValidatorFunctionReturnTypes | Promise<ValidatorFunctionReturnTypes>;\r\n\r\nfunction extendValidators(name: string, fn: ValidatorFunction) {\r\n  validators[name] = fn;\r\n};\r\n\r\nexport type ModelOption = {\r\n  value: any;\r\n  validate: Array<ValidatorFunction | string>;\r\n}\r\n\r\nfunction model(value: any, ...validate: Array<ValidatorFunction | string>) {\r\n  return { value, validate } as ModelOption;\r\n}\r\n\r\nexport { extendValidators, model };\r\n\r\nconst has = (o: any, k: string) => o[k] !== undefined;\r\n\r\nconst flatten = (object: any) => {\r\n  return Object.assign({}, ...function _flatten(objectBit: any, path: string = ''): any[] {  //spread the result into our return object\r\n    return ([] as any[]).concat(                                                       //concat everything into one level\r\n      ...Object.keys(objectBit).map(                                      //iterate over object\r\n        key => typeof objectBit[key] === 'object' && !Array.isArray(objectBit[key]) ?                       //check if there is a nested object\r\n          _flatten(objectBit[key], !path ? key : `${path}.${key}`) :              //call itself if there is\r\n          ({ [!path ? key : `${path}.${key}`]: objectBit[key] })                //append object with it’s path as key\r\n      )\r\n    ) as any[];\r\n  }(object));\r\n};\r\n\r\nconst getValidationPaths = (options: ParseOptions) => {\r\n  const paths = flatten(options);\r\n  // for (let k in paths) {\r\n  //   if (!Array.isArray(paths[k])) {\r\n  //     paths[k] = [paths[k]];\r\n  //   }\r\n  // }\r\n\r\n  return paths;\r\n}\r\n\r\nfunction execValidator(fn: ValidatorFunction | string, val: any) {\r\n  const executor = typeof fn === 'function' ? fn : has(validators, fn) ? validators[fn] : function noop() { console.warn('built in validator with name `%s` not found. this is a no-op', fn) };//default-> no op\r\n  const res = executor(val);\r\n  if (!(res instanceof Promise)) {\r\n    if (res) {\r\n      return Promise.reject(!(res instanceof Error) ? new Error(res) : res);\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction parsePath(path: string) {\r\n  return path.split('.');\r\n}\r\n\r\n//recursive assign value to all properties of object\r\nfunction oSet(o: any, v: any) {\r\n  for (let k in o) {\r\n    if (typeof o[k] === 'object') {\r\n      oSet(o[k], v);\r\n    } else {\r\n      o[k] = v;\r\n    }\r\n  }\r\n  return o;\r\n}\r\n\r\nfunction assignValues(optPointer: any, statePointer: any, errorPointer: any) {\r\n  for (let k in optPointer) {\r\n    if (typeof optPointer[k] === 'object' && optPointer[k] !== null) {\r\n      let shouldRecurse = true;\r\n      if (has(optPointer[k], 'value')) {\r\n        statePointer[k] = optPointer[k].value;\r\n        shouldRecurse = false;\r\n      }\r\n      if (has(optPointer[k], 'validate')) {\r\n        errorPointer[k] = optPointer[k].validate;\r\n        shouldRecurse = false;\r\n      }\r\n      if (shouldRecurse) {\r\n        if (!has(statePointer, k)) {\r\n          statePointer[k] = {};\r\n        }\r\n        if (!has(errorPointer, k)) {\r\n          errorPointer[k] = {};\r\n        }\r\n        assignValues(optPointer[k], statePointer[k], errorPointer[k]);\r\n      }\r\n    } else {\r\n      statePointer[k] = optPointer[k];\r\n    }\r\n  }\r\n}\r\n\r\nexport type ParseOptions = {\r\n  [key: string]: any;\r\n};\r\n\r\ntype ErrorState<T> = { [P in keyof T]: boolean | string; };\r\n\r\nfunction parseOptions<T = any>(opts: ParseOptions) {\r\n\r\n  const state = {};\r\n  const errors = {};\r\n  assignValues(opts, state, errors);//this recursive function will populate defaultState and errorOptions for us.\r\n  const errorState: ErrorState<T> = oSet({ ...state }, false);\r\n  const validationPaths = getValidationPaths(errors);\r\n\r\n  return { defaultState: state as T, errorState, validationPaths };\r\n}\r\n\r\nexport type ErrorLikeObject = {\r\n  message: string;\r\n};\r\n\r\nfunction stringifyErr(err: string | ErrorLikeObject | unknown) {\r\n  if (typeof err === 'string') {\r\n    return err;\r\n  } else {\r\n    // Error, or Error like object(eg, custom error classes)\r\n    if (typeof err === 'object' && has(err, 'message') && typeof (err as ErrorLikeObject).message === 'string') {\r\n      return (err as ErrorLikeObject).message;\r\n    }\r\n  }\r\n  return (err as any).toString();//last resort\r\n}\r\n\r\nexport type Options = {\r\n  [k: string]: ModelOption | Options | any;\r\n};\r\n\r\nexport default function useModels<T = any>(options: Options = {}) {\r\n\r\n  const { defaultState, errorState, validationPaths } = parseOptions<T>(options);\r\n  const watchPaths = {};\r\n  const [state, setState] = useState<T>(defaultState);\r\n  const [errors, setErrors] = useState<ErrorState<T>>(errorState);\r\n\r\n  const validate = async () => {\r\n    const errs = [];\r\n    for (let k in validationPaths) {\r\n      for (let i = 0; i < validationPaths[k].length; i++) {\r\n        try {\r\n          await execValidator(validationPaths[k][i], getValue(k));\r\n        }\r\n        catch (e) {\r\n          errs.push({ field: k, error: e });\r\n        }\r\n      }\r\n    }\r\n\r\n    let errState = oSet({ ...defaultState }, false);\r\n    if (errs.length) {\r\n      errs.forEach(err => {\r\n        errState = getUpdate<ErrorState<T>>(err.field, stringifyErr(err.error), errState);\r\n      });\r\n    }\r\n    setErrors(errState);\r\n    return errs;\r\n\r\n  }\r\n\r\n  const validatePath = async (path: string, value: any) => {\r\n    if (has(validationPaths, path)) {\r\n      for (let i = 0; i < validationPaths[path].length; i++) {\r\n        try {\r\n          await execValidator(validationPaths[path][i], value);\r\n        }\r\n        catch (e) {\r\n          return setErrors(getUpdate<ErrorState<T>>(path, stringifyErr(e), errors));\r\n        }\r\n      }\r\n      setErrors(getUpdate(path, false, errors));\r\n    }\r\n  };\r\n\r\n  let errorHandler: any = () => { };\r\n\r\n  function getValue(name: string) {\r\n    const path = parsePath(name);\r\n    let value = state;\r\n    for (let i = 0; i < path.length; i++) {\r\n      value = value[path[i]];\r\n    }\r\n    return (value as unknown) as string;\r\n  }\r\n\r\n  function getUpdate<T2 = T>(name: string, value: any, __state: any = state) {\r\n    const _state: T2 = { ...__state };\r\n    const path = parsePath(name);\r\n    if (path.length) {\r\n      var obj = _state;\r\n      for (let i = 0; i < path.length - 1; i++) {\r\n        obj = has(obj, path[i]) ? obj[path[i]] : {};\r\n      }\r\n      obj[path[path.length - 1]] = value;\r\n    }\r\n    return _state;\r\n  }\r\n\r\n  function input(name: string, type: string = \"text\") {\r\n    return {\r\n      onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | any> | React.SyntheticEvent<EventTarget> | Event | any) => {\r\n\r\n        var value = e;//components like react-select-me pass primitive values\r\n        if (has(e, 'value')) {\r\n          value = (e as any).value;\r\n        }\r\n\r\n        if (has(e, 'target')) {\r\n          value = (e as any).target.value;//normal inputs dont\r\n        }\r\n\r\n        const oldValue = getValue(name);\r\n        setState(getUpdate(name, value));\r\n        if (watchPaths[name]) {\r\n          watchPaths[name](value, oldValue);\r\n        }\r\n        validatePath(name, value);\r\n      },\r\n      value: getValue(name),\r\n      name,\r\n      type\r\n    };\r\n  };\r\n\r\n  function checkbox(name: string, truevalue: any = true, falsevalue: any = false) {\r\n\r\n    return {\r\n      onChange: (e: React.ChangeEvent<HTMLInputElement> | React.SyntheticEvent<EventTarget> | Event | any) => {\r\n        const newValue = (e as any).target.checked ? truevalue : falsevalue;\r\n        const oldValue = getValue(name);\r\n        setState(getUpdate(name, newValue));\r\n        if (watchPaths[name]) {\r\n          watchPaths[name](newValue, oldValue);\r\n        }\r\n        validatePath(name, newValue);\r\n      },\r\n      checked: getValue(name) === truevalue,\r\n      type: 'checkbox',\r\n      name,\r\n      value: truevalue\r\n    };\r\n  };\r\n\r\n  function radio(name: string, value: any = null) {\r\n\r\n    return {\r\n      onChange: (e: React.ChangeEvent<HTMLInputElement> | React.SyntheticEvent<EventTarget> | Event | any) => {\r\n        if ((e as any).target.checked) {\r\n          const newValue = value;\r\n          const oldValue = getValue(name);\r\n          setState(getUpdate(name, value))\r\n          if (watchPaths[name]) {\r\n            watchPaths[name](newValue, oldValue);\r\n          }\r\n          validatePath(name, newValue);\r\n        }\r\n      },\r\n      checked: getValue(name) === value,\r\n      type: 'radio',\r\n      name,\r\n      value\r\n    };\r\n  };\r\n\r\n  function submit(cb: (state: any) => any | void) {\r\n    return async (e: React.FormEvent<EventTarget> | React.SyntheticEvent<EventTarget> | Event | any) => {\r\n      e.preventDefault();\r\n      const errs = await validate();\r\n\r\n      if (errs.length) {\r\n        errorHandler(errors, state);\r\n      } else {\r\n        cb(state);//send the full state to the submit function\r\n      }\r\n      e.stopPropagation();\r\n    };\r\n\r\n  };\r\n\r\n  function error(cb: (errors: any, state: any) => any | void) {\r\n\r\n    errorHandler = cb;\r\n    return () => {\r\n\r\n      cb(errors, state);\r\n    };\r\n  }\r\n\r\n  function getState() {\r\n\r\n    return state;\r\n  }\r\n\r\n  function getErrors() {\r\n\r\n    return errors;\r\n  }\r\n\r\n  function watch(path: string, fn: (newVal: any, oldVal: any) => any) {\r\n    watchPaths[path] = fn;\r\n    return function unwatch() {\r\n      delete watchPaths[path];\r\n    }\r\n  }\r\n\r\n  function set(name: string, value: any, runValidators = true, runWatchers = true) {\r\n    const oldValue = getValue(name);\r\n    setState(getUpdate(name, value));\r\n    if (runWatchers && watchPaths[name]) {\r\n      watchPaths[name](value, oldValue);\r\n    }\r\n    if (runValidators\r\n) {\r\n      validatePath(name, value);\r\n    }\r\n  }\r\n\r\n  function get(name: string) {\r\n    return getValue(name);\r\n  }\r\n\r\n  const hydrate = useCallback((_state: any, _errors: any = false) => {\r\n\r\n    setState({ ...state, ..._state });\r\n    if (_errors) {\r\n      setErrors({ ...errors, ..._errors });\r\n    }\r\n\r\n  }, []);\r\n\r\n  return { input, checkbox, radio, submit, error, errors, state, watch, hydrate, set, get, getState, getErrors, setState, setErrors };\r\n\r\n};","import React, { useEffect } from 'react'\r\n\r\nimport useModels, { model, extendValidators } from 'use-models'\r\n\r\nextendValidators('checkUsername', async (_value:string) => {\r\n  return await new Promise((_resolve, reject) => {\r\n    setTimeout(() => reject(new Error('That username is taken')), 200)\r\n  })\r\n});\r\n\r\nexport type FormState = {\r\n  name: string;\r\n  username: string;\r\n  email: string;\r\n  remember: boolean;\r\n  newsletter: string;\r\n  user_type: string;\r\n}\r\n\r\nexport default function Form() {\r\n  const {\r\n    state,\r\n    errors,\r\n    input,\r\n    checkbox,\r\n    radio,\r\n    submit,\r\n    error,\r\n    watch,\r\n    hydrate,\r\n    set\r\n  } = useModels<FormState>({\r\n    name: model('', (value:string):void|string => {\r\n      if (value.length < 5) {\r\n        return 'Name must be at least 5 characters'\r\n      }\r\n    }),\r\n    username: model('', 'checkUsername'),\r\n    email: model('', 'email'),\r\n    remember: false,\r\n    newsletter: 'no',\r\n    user_type: 'user'\r\n  })\r\n\r\n  //we can hydrate the state(and errors), for example from localstorage or a db call\r\n  useEffect(() => {\r\n    hydrate({\r\n      name: 'Garrett',\r\n      email: 'test@test.com',\r\n      newsletter: 'yes'\r\n    })\r\n  }, [hydrate])\r\n\r\n  const onSubmit = submit((state) => {\r\n    //do something with your form data\r\n    console.log(state)\r\n  })\r\n\r\n  const onError = error((errors, state) => {\r\n    //do something on form submit error\r\n    console.log(errors,state);\r\n  })\r\n\r\n  watch('username', (value, previousValue) => {\r\n    console.log('username changed from %s to %s', previousValue, value)\r\n  }) // returns a function that unregisters the watcher.\r\n\r\n  return (\r\n    <div className='form'>\r\n      <form onSubmit={onSubmit} onError={onError}>\r\n        <div className='form-group'>\r\n          <label>Select user type:</label>\r\n          <div className='user-type-select'>\r\n            <div\r\n              className={\r\n                'user-type-option' +\r\n                (state.user_type === 'user' ? ' selected' : '')\r\n              }\r\n              onClick={(_e:React.MouseEvent<HTMLDivElement>) => set('user_type', 'user')}\r\n            >\r\n              Normal User\r\n            </div>\r\n            <div\r\n              className={\r\n                'user-type-option' +\r\n                (state.user_type === 'admin' ? ' selected' : '')\r\n              }\r\n              onClick={(_e:React.MouseEvent<HTMLDivElement>) => set('user_type', 'admin')}\r\n            >\r\n              Admin User\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='name'>Name</label>\r\n          <input id='name' {...input('name')} />\r\n          {errors.name && <p className='help-text'>{errors.name}</p>}\r\n        </div>\r\n        <div className='form-group'>\r\n          <label>Desired Username</label>\r\n          <input {...input('username')} />\r\n          {errors.username && <p className='help-text'>{errors.username}</p>}\r\n        </div>\r\n        <div className='form-group'>\r\n          <label>Email Address:</label>\r\n          <input {...input('email', 'email')} />\r\n          {errors.email && <p className='help-text'>{errors.email}</p>}\r\n        </div>\r\n        <div className='form-group-check'>\r\n          <input {...checkbox('remember')} /> <label>Remember me</label>\r\n        </div>\r\n        <div className='form-group with-nested'>\r\n          <label>Sign up for newsletter?</label>\r\n          <div className='form-group-check'>\r\n            <input {...radio('newsletter', 'yes')} />{' '}\r\n            <label>Yes, Sign me up!</label>\r\n          </div>\r\n          <div className='form-group-check'>\r\n            <input {...radio('newsletter', 'no')} /> <label>No thanks</label>\r\n          </div>\r\n        </div>\r\n        <button type='submit'>Submit</button>\r\n        <div className='results'>\r\n          <div className='result-50'>\r\n            <strong>State:</strong>\r\n            <pre className='debug'>{JSON.stringify(state, null, 2)}</pre>\r\n          </div>\r\n          <div className='result-50'>\r\n            <strong>Errors:</strong>\r\n            <pre className='debug'>{JSON.stringify(errors, null, 2)}</pre>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n};","import React,{useState} from 'react'\r\nimport Form from './Form'\r\n\r\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\r\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\r\nimport prism from 'react-syntax-highlighter/dist/esm/styles/prism/prism'\r\n\r\nSyntaxHighlighter.registerLanguage('jsx', jsx)\r\n\r\nconst codeString = `\r\nimport React, { useEffect } from 'react'\r\n\r\nimport useModels, { model, extendValidators } from 'use-models'\r\n\r\nextendValidators('checkUsername', async (value) => {\r\n  return await new Promise((resolve, reject) => {\r\n    setTimeout(() => reject(new Error('That username is taken')), 200)\r\n  })\r\n})\r\n\r\nexport default function Form() {\r\n  const {\r\n    state,\r\n    errors,\r\n    input,\r\n    checkbox,\r\n    radio,\r\n    submit,\r\n    error,\r\n    watch,\r\n    hydrate,\r\n    set\r\n  } = useModels({\r\n    name: model('', (value) => {\r\n      if (value.length < 5) {\r\n        return 'Name must be at least 5 characters'\r\n      }\r\n    }),\r\n    username: model('', 'checkUsername'),\r\n    email: model('', 'email'),\r\n    remember: false,\r\n    newsletter: 'no',\r\n    user_type: 'user'\r\n  })\r\n\r\n  //we can hydrate the state(and errors), for example from localstorage or a db call\r\n  useEffect(() => {\r\n    hydrate({\r\n      name: 'Garrett',\r\n      email: 'test@test.com',\r\n      newsletter: 'yes'\r\n    })\r\n  }, [hydrate])\r\n\r\n  const onSubmit = submit((state) => {\r\n    //do something with your form data\r\n    console.log(state)\r\n  })\r\n\r\n  const onError = error((errors, state) => {\r\n    //do something on form submit error\r\n  })\r\n\r\n  watch('username', (value, previousValue) => {\r\n    console.log('username changed from %s to %s', previousValue, value)\r\n  }) // returns a function that unregisters the watcher.\r\n\r\n  return (\r\n    <div className='form'>\r\n      <form onSubmit={onSubmit} onError={onError}>\r\n        <div className='form-group'>\r\n          <label>Select user type:</label>\r\n          <div className='user-type-select'>\r\n            <div\r\n              className={\r\n                'user-type-option' +\r\n                (state.user_type === 'user' ? ' selected' : '')\r\n              }\r\n              onClick={(e) => set('user_type', 'user')}\r\n            >\r\n              Normal User\r\n            </div>\r\n            <div\r\n              className={\r\n                'user-type-option' +\r\n                (state.user_type === 'admin' ? ' selected' : '')\r\n              }\r\n              onClick={(e) => set('user_type', 'admin')}\r\n            >\r\n              Admin User\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='form-group'>\r\n          <label>Name</label>\r\n          <input {...input('name')} />\r\n          {errors.name && <p className='help-text'>{errors.name}</p>}\r\n        </div>\r\n        <div className='form-group'>\r\n          <label>Desired Username</label>\r\n          <input {...input('username')} />\r\n          {errors.username && <p className='help-text'>{errors.username}</p>}\r\n        </div>\r\n        <div className='form-group'>\r\n          <label>Email Address:</label>\r\n          <input {...input('email', 'email')} />\r\n          {errors.email && <p className='help-text'>{errors.email}</p>}\r\n        </div>\r\n        <div className='form-group-check'>\r\n          <input {...checkbox('remember')} /> <label>Remember me</label>\r\n        </div>\r\n        <div className='form-group with-nested'>\r\n          <label>Sign up for newsletter?</label>\r\n          <div className='form-group-check'>\r\n            <input {...radio('newsletter', 'yes')} />{' '}\r\n            <label>Yes, Sign me up!</label>\r\n          </div>\r\n          <div className='form-group-check'>\r\n            <input {...radio('newsletter', 'no')} /> <label>No thanks</label>\r\n          </div>\r\n        </div>\r\n        <button type='submit'>Submit</button>\r\n        <div className='results'>\r\n          <div className='result-50'>\r\n            <strong>State:</strong>\r\n            <pre className='debug'>{JSON.stringify(state, null, 2)}</pre>\r\n          </div>\r\n          <div className='result-50'>\r\n            <strong>Errors:</strong>\r\n            <pre className='debug'>{JSON.stringify(errors, null, 2)}</pre>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n};\r\n`\r\n\r\nexport default function App() {\r\n  const [mobileActive,setMobileActive] = useState<number>(0);\r\n\r\n  return (\r\n    <div className='gh-example'>\r\n      <div className='gh-100 title'>\r\n        <div className='left'>\r\n          <h1>Use-models</h1>\r\n          <p>advanced form model hooks for your functional react components</p>\r\n        </div>\r\n        <div className='right'>\r\n          <a href='https://www.npmjs.com/package/use-models'>[NPM]</a>\r\n          <a href='https://github.com/r3wt/use-models'>[Github]</a>\r\n        </div>\r\n      </div>\r\n      <div className=\"gh-mobile-tabs\">\r\n        <h1 className={(mobileActive===0?'active':'')} onClick={()=>setMobileActive(0)}>Code:</h1>\r\n        <h1 className={(mobileActive===1?'active':'')} onClick={()=>setMobileActive(1)}>Output:</h1>\r\n      </div>\r\n      <div className={'gh-50 '+(mobileActive===0&&'active')}>\r\n        <h1>Code:</h1>\r\n        <div className='box-1'>\r\n          <SyntaxHighlighter\r\n            language='jsx'\r\n            style={prism}\r\n            customStyle={{ fontSize: '14px', lineHeight: '18px' }}\r\n          >\r\n            {codeString}\r\n          </SyntaxHighlighter>\r\n        </div>\r\n      </div>\r\n      <div className={'gh-50 '+(mobileActive===1&&'active')}>\r\n        <h1>Output:</h1>\r\n        <div className='box-2'>\r\n          <Form />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import './index.scss'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}